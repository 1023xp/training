BIN = test
CC = gcc
INCS =
LIBS =
SUBDIRS =
#生成依赖信息时的搜索目录，到下列目录中搜索一个依赖文件(如.h文件)
DEFINC = -I"main" -I"init"
#给INCS加上依赖搜索路径，分开写可能会产生不一致情况，而且繁琐
INCS += $(DEFINC)
#
SRCS = $(wildcard ./*.c ./main/*.c ./init/*.c)

#
#所有的.o文件列表
OBJS := $(SRCS:.c=.o)
#
MAKEDEPEND = gcc -MM -MT
CFLAGS += $(INCS)
#
#针对每个.c文件的.d依赖文件列表
DEF = $(SRCS:.c=.d)

all:$(BIN)

$(DEF) : %.d : %.c
	$(MAKEDEPEND) $(<:.c=.o) $< $(DEFINC) > $@


#重新生成依赖信息
depend:
	rm $(DEF)
	$(MAKE) $(DEF)

#$(OBJS):%.o :%.c  先用$(OBJS)中的一项，比如foo.o: %.o : %.c  含义为:试着用%.o匹配foo.o。如果成功%就等于foo。如果不成功，
# Make就会警告，然后。给foo.o添加依赖文件foo.c(用foo替换了%.c里的%)
# 也可以不要下面的这个生成规则，因为下面的 include $(DEF)  就隐含了。此处为了明了，易懂。故留着
$(OBJS) : %.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS)

$(BIN) : $(OBJS)
	$(CC) -o $(BIN) $(OBJS) $(LIBS)

include $(DEF)
.PHONY:clean cleanall

#清除所有目标文件以及生成的最终目标文件
clean:            
	rm $(BIN) $(OBJS)
cleanall:
	rm $(DEF)
	rm $(BIN) $(OBJS)
